name: CI

on:
  workflow_call:

jobs:
  CI:
    runs-on: ${{matrix.os}}
    env:
      GH_APP_ACCESS_TOKEN_HDT: ${{ secrets.GH_APP_ACCESS_TOKEN_HDT }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.N0Pa55wrd }}

    strategy:
      fail-fast: true
      matrix:
        #        python-version: ['3.8', '3.9', '3.10', '3.11']
        python-version: [ '3.12' ]
        #        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        os: [ 'ubuntu-latest' ]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Configure Poetry
        run: |
          poetry config keyring.enabled false
          poetry config http-basic.github.com x-access-token ${{ secrets.GH_APP_ACCESS_TOKEN_HDT }}
          poetry config --list

      - name: Install dependencies
        run: |
          poetry install --with dev

        # 4. Build and start containers in the background
        #    The `--build` flag ensures containers are built fresh
        #    for each run
      - name: Build and start containers
        run: docker-compose up -d --build

      - name: Run pytest with coverage
        run: |
          echo "PythonPath=$PYTHONPATH"
          poetry run pytest tests/ --maxfail=1 --cov=./ --cov-report=xml


      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: hendrikdutoit/DockerMySqlExample


      # 5. Run tests
      #    Your test_integration.py should handle waiting for the
      #    service to become ready
      #      - name: Run tests
      #        run: pytest tests/ --maxfail=1 --disable-warnings

      # 6. Shut down and clean up containers
      - name: Shutdown
        run: docker-compose down